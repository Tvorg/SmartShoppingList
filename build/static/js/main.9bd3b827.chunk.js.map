{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Todo/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","styles","li","display","justifyContent","alignItems","padding","border","borderRadius","marginBottom","input","marginRight","button","background","color","TodoItem","todo","index","onChange","removeTodo","useContext","classes","completed","push","style","className","join","type","checked","id","title","onClick","bind","ul","listStyle","margin","TodoList","props","todos","map","key","onToggle","AddTodo","onCreate","useState","value","setValue","width","height","onSubmit","event","preventDefault","trim","target","App","setTodos","Provider","filter","length","concat","Date","now","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gKAIeA,EAFCC,IAAMC,gBCEhBC,EAAS,CACXC,GAAG,CACCC,QAAS,OACTC,eAAgB,gBAChBC,WAAY,SACZC,QAAS,aACTC,OAAQ,iBACRC,aAAc,MACdC,aAAc,SAGlBC,MAAM,CACFC,YAAa,QAEjBC,OAAO,CACHC,WAAY,OACZN,OAAQ,iBACRC,aAAc,MACdM,MAAO,UAuCAC,MAnCf,YAA6C,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACrBC,EAAeC,qBAAWtB,GAA1BqB,WACFE,EAAS,GAIf,OAHGL,EAAKM,WACJD,EAAQE,KAAK,QAGb,wBAAIC,MAAOvB,EAAOC,IACd,0BAAMuB,UAAWJ,EAAQK,KAAK,KAC1B,2BACAC,KAAK,WACLC,QAASZ,EAAKM,UACdE,MAAOvB,EAAOS,MACdQ,SAAU,kBAAMA,EAASF,EAAKa,OAE9B,gCAASZ,EAAO,GAPpB,OASKD,EAAKc,OAGV,4BAAQN,MAAOvB,EAAOW,OAAQmB,QAASZ,EAAWa,KAAK,KAAMhB,EAAKa,KAAlE,UC1CN5B,EAAQ,CACVgC,GAAI,CACAC,UAAW,OACXC,OAAQ,EACR7B,QAAS,IA6BF8B,MAzBX,SAAkBC,GAClB,OACI,wBAAIb,MAAOvB,EAAOgC,IACbI,EAAMC,MAAMC,KAAI,SAACvB,EAAMC,GACpB,OACI,kBAAC,EAAD,CACAD,KAAMA,EACNwB,IAAKxB,EAAKa,GACVZ,MAAOA,EACPC,SAAUmB,EAAMI,gBC+BrBC,MAhDf,YAA8B,IAAZC,EAAW,EAAXA,SAAW,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,KAYzB,OACI,0BAAMtB,MAAO,CACTf,aAAc,OACd0B,OAAQ,SACRY,MAAO,QACP5C,QAAS,OACTC,eAAgB,gBAChB4C,OAAQ,QAETC,SAlBX,SAAwBC,GAChBA,EAAMC,iBAEPN,EAAMO,SACLT,EAAS,wCAAYE,GACrBC,EAAS,OAcL,2BAAOD,MAAOA,EAAO3B,SAAU,SAAAgC,GAAK,OAChCJ,EAASI,EAAMG,OAAOR,QACnBrB,MAAO,CACHjB,OAAQ,iBACRC,aAAc,MACduC,MAAO,WAGlB,4BAAQpB,KAAM,SACVH,MAAO,CACHX,WAAY,OACZN,OAAQ,iBACRC,aAAc,MACdM,MAAO,QACPiC,MAAO,SANf,cCoBGO,MAhDf,WAAgB,IAAD,EACcvD,IAAM6C,SAAS,CACpC,CAACf,GAAI,EAAGP,WAAW,EAAOQ,MAAO,iEACjC,CAACD,GAAI,EAAGP,WAAW,EAAOQ,MAAO,iEACjC,CAACD,GAAI,EAAGP,WAAW,EAAOQ,MAAO,+EAJ1B,mBACJQ,EADI,KACGiB,EADH,KA+Bb,OACI,kBAAC,EAAQC,SAAT,CAAkBX,MAAO,CAAC1B,WAjBhC,SAAoBU,GACZ0B,EAASjB,EAAMmB,QAAO,SAAAzC,GAAI,OAAIA,EAAKa,KAAOA,SAiB5C,yBAAKJ,UAAU,WACb,mDAEGa,EAAMoB,OACP,kBAAC,EAAD,CAAUpB,MAAOA,EAAOG,SA/BlC,SAAoBZ,GAChB0B,EAASjB,EAAMC,KAAI,SAAAvB,GAIf,OAHIA,EAAKa,KAAOA,IACZb,EAAKM,WAAaN,EAAKM,WAEpBN,SA4BD,6DAEJ,kBAAC,EAAD,CAAS2B,SAtBnB,SAAiBb,GACTyB,EAASjB,EAAMqB,OAAO,CAClB,CACE7B,QACAD,GAAI+B,KAAKC,MACTvC,WAAW,YClBLwC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.9bd3b827.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, {useContext} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Context from \"../context\";\r\n\r\nconst styles = {\r\n    li:{\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\",\r\n        padding: \".5rem 1rem\",\r\n        border: \"1px solid #ccc\",\r\n        borderRadius: \"4px\",\r\n        marginBottom: \".5rem\"\r\n\r\n    },\r\n    input:{\r\n        marginRight: \"1rem\"\r\n    },\r\n    button:{\r\n        background: \"grey\",\r\n        border: \"1px solid grey\",\r\n        borderRadius: \"5px\",\r\n        color: \"white\"\r\n    }\r\n}\r\n\r\nfunction TodoItem({ todo, index, onChange}) {\r\n    const { removeTodo } = useContext(Context)\r\n    const classes =[]\r\n    if(todo.completed){\r\n        classes.push('done')\r\n    }\r\n    return(\r\n        <li style={styles.li}>\r\n            <span className={classes.join('')}>\r\n                <input\r\n                type=\"checkbox\"\r\n                checked={todo.completed}\r\n                style={styles.input}\r\n                onChange={() => onChange(todo.id)}\r\n                />\r\n                <strong>{index +1}</strong>\r\n                &nbsp;\r\n                {todo.title}\r\n            </span>\r\n\r\n            <button style={styles.button} onClick={removeTodo.bind(null, todo.id)}>\r\n                &times;</button>\r\n\r\n        </li>\r\n        )\r\n}\r\n\r\n\r\nTodoItem.propTypes ={\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number,\r\n    onChange: PropTypes.func.isRequired\r\n }\r\n\r\n\r\nexport default TodoItem","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TodoItem from \"./TodoItem\";\r\n\r\nconst styles= {\r\n    ul: {\r\n        listStyle: 'none',\r\n        margin: 0,\r\n        padding: 0\r\n    }\r\n}\r\n\r\n    function TodoList(props) {\r\n    return(\r\n        <ul style={styles.ul}>\r\n            {props.todos.map((todo, index)=>{\r\n                return (\r\n                    <TodoItem\r\n                    todo={todo}\r\n                    key={todo.id}\r\n                    index={index}\r\n                    onChange={props.onToggle}\r\n                    />\r\n                    )\r\n            })}\r\n        </ul>\r\n    )\r\n\r\n}\r\n\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onToggle: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default TodoList","import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\"\r\n\r\n\r\nfunction AddTodo({onCreate}) {\r\n    const [value, setValue] = useState('')\r\n\r\nfunction submitHandler (event) {\r\n        event.preventDefault()\r\n\r\n    if(value.trim()){\r\n        onCreate('Купить ' + value)\r\n        setValue('')\r\n    }\r\n}\r\n\r\n    return(\r\n        <form style={{\r\n            marginBottom: \"1rem\",\r\n            margin: \"0 auto\",\r\n            width: \"600px\",\r\n            display: \"flex\",\r\n            justifyContent: \"space-between\",\r\n            height: \"38px\"\r\n\r\n        }} onSubmit={submitHandler}>\r\n            <input value={value} onChange={event =>\r\n                setValue(event.target.value)}\r\n                   style={{\r\n                       border: \"1px solid #ccc\",\r\n                       borderRadius: \"4px\",\r\n                       width: \"512px\"\r\n\r\n                   }}/>\r\n            <button type={\"submit\"}\r\n                style={{\r\n                    background: \"grey\",\r\n                    border: \"1px solid grey\",\r\n                    borderRadius: \"5px\",\r\n                    color: \"white\",\r\n                    width: \"78px\"\r\n                }}>\r\n                Add item\r\n            </button>\r\n        </form>\r\n    )\r\n\r\n}\r\nAddTodo.propTypes = {\r\n    onCreate: PropTypes.func.isRequired\r\n\r\n}\r\nexport default AddTodo","import React from 'react';\nimport TodoList from \"./Todo/TodoList\";\nimport Context from \"./context\";\nimport AddTodo from \"./Todo/AddTodo\";\n\n\nfunction App() {\n    const [todos, setTodos]= React.useState([\n        {id: 1, completed: false, title: 'Купить хлеб'},\n        {id: 2, completed: false, title: 'Купить воду'},\n        {id: 3, completed: false, title: 'Купить молоко'}\n    ])\nfunction toggleTodo(id) {\n    setTodos(todos.map(todo => {\n        if (todo.id === id){\n            todo.completed = !todo.completed\n        }\n        return todo\n    }))\n}\n\nfunction removeTodo(id) {\n        setTodos(todos.filter(todo => todo.id !== id))\n}\n\nfunction addTodo(title) {\n        setTodos(todos.concat([\n            {\n              title,\n              id: Date.now(),\n              completed: false\n            }\n        ])\n   )\n\n}\n\n  return(\n      <Context.Provider value={{removeTodo: removeTodo}}>\n      <div className='wrapper'>\n        <h1>Smart Shopping List</h1>\n\n          {todos.length ?(\n          <TodoList todos={todos} onToggle={toggleTodo}/>\n          ):(\n              <p>Please add item for your list!</p>\n              )}\n          <AddTodo onCreate={addTodo}/>\n      </div>\n\n          </Context.Provider>\n    )}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}