{"version":3,"sources":["context.js","Todo/TodoItem.js","Todo/TodoList.js","Todo/AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Context","React","createContext","TodoItem","todo","index","onChange","removeTodo","useContext","className","completed","type","checked","id","title","onClick","bind","TodoList","props","todos","map","key","onToggle","AddTodo","onCreate","useState","value","setValue","onSubmit","event","preventDefault","trim","target","App","stringTodos","localStorage","getItem","parseTodos","JSON","parse","Array","isArray","setTodos","useEffect","setItem","stringify","Provider","filter","length","concat","Date","now","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+OAIeA,EAFCC,IAAMC,gB,KCqCPC,MAjCf,YAA4C,IAAzBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,SACrBC,EAAcC,qBAAWR,GAAzBO,WAEP,OACI,wBAAIE,UAAU,mBACV,0BAAMA,UAAW,qBAAuBL,EAAKM,UAAW,QAAU,KAC9D,2BACID,UAAU,qBACVE,KAAK,WACLC,QAASR,EAAKM,UACdJ,SAAU,kBAAMA,EAASF,EAAKS,OAElC,gCAASR,EAAQ,GAPrB,OASKD,EAAKU,OAGV,4BAAQL,UAAU,sBAAsBM,QAASR,EAAWS,KAAK,KAAMZ,EAAKS,KAA5E,OCQGI,MAzBf,SAAkBC,GACd,OACI,wBAAIT,UAAU,mBACTS,EAAMC,MAAMC,KAAI,SAAChB,EAAMC,GACpB,OACI,kBAAC,EAAD,CACID,KAAMA,EACNiB,IAAKjB,EAAKS,GACVR,MAAOA,EACPC,SAAUY,EAAMI,gBCoBzBC,MA9Bf,YAA8B,IAAZC,EAAW,EAAXA,SAAW,EACCC,mBAAS,IADV,mBAClBC,EADkB,KACXC,EADW,KAYzB,OACI,0BAAMlB,UAAU,eAAemB,SAVnC,SAAuBC,GACnBA,EAAMC,iBAEFJ,EAAMK,SACNP,EAAS,wCAAYE,GACrBC,EAAS,OAMT,2BAAOD,MAAOA,EAAOpB,SAAU,SAAAuB,GAAK,OAChCF,EAASE,EAAMG,OAAON,QACnBjB,UAAU,kBAEjB,4BAAQE,KAAM,SAAUF,UAAU,kBAAlC,cCyCGwB,MA1Df,WAAgB,IAAD,EACehC,IAAMwB,UAAS,WACrC,IAAMS,EAAcC,aAAaC,QAAQ,SACnCC,EAAaC,KAAKC,MAAML,GAC9B,OAAIM,MAAMC,QAAQJ,GACPA,EAEA,MAPJ,mBACJlB,EADI,KACGuB,EADH,KAyCX,OALAC,qBAAU,WACNR,aAAaS,QAAQ,QAASN,KAAKO,UAAU1B,MAC9C,CAACA,IAIA,kBAAC,EAAQ2B,SAAT,CAAkBpB,MAAO,CAACnB,WAtB9B,SAAoBM,GAChB6B,EAASvB,EAAM4B,QAAO,SAAA3C,GAAI,OAAIA,EAAKS,KAAOA,SAsBtC,yBAAKJ,UAAU,WACX,uBAAGA,UAAU,kBAAb,uBACCU,EAAM6B,OACH,kBAAC,EAAD,CAAU7B,MAAOA,EAAOG,SAnCxC,SAAoBT,GAChB6B,EAASvB,EAAMC,KAAI,SAAAhB,GAIf,OAHIA,EAAKS,KAAOA,IACZT,EAAKM,WAAaN,EAAKM,WAEpBN,SAgCC,6DAEJ,kBAAC,EAAD,CAASoB,SA1BrB,SAAiBV,GACb4B,EAASvB,EAAM8B,OAAO,CACd,CACInC,QACAD,GAAIqC,KAAKC,MACTzC,WAAW,YCvBX0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.906624df.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Context = React.createContext()\r\n\r\nexport default Context","import React, {useContext} from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Context from \"../context\";\r\nimport \"./Todo.css\"\r\n\r\n\r\nfunction TodoItem({todo, index, onChange}) {\r\n    const {removeTodo} = useContext(Context)\r\n\r\n    return (\r\n        <li className=\"liTodoItemStyle\">\r\n            <span className={\"spanTodoItemStyle\" + (todo.completed ?' done' : '')}>\r\n                <input\r\n                    className=\"inputTodoItemStyle\"\r\n                    type=\"checkbox\"\r\n                    checked={todo.completed}\r\n                    onChange={() => onChange(todo.id)}\r\n                />\r\n                <strong>{index + 1}</strong>\r\n                &nbsp;\r\n                {todo.title}\r\n            </span>\r\n\r\n            <button className=\"buttonTodoItemStyle\" onClick={removeTodo.bind(null, todo.id)}>\r\n                x\r\n            </button>\r\n\r\n        </li>\r\n    )\r\n}\r\n\r\n\r\nTodoItem.propTypes = {\r\n    todo: PropTypes.object.isRequired,\r\n    index: PropTypes.number,\r\n    onChange: PropTypes.func.isRequired\r\n}\r\n\r\n\r\nexport default TodoItem","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport TodoItem from \"./TodoItem\";\r\nimport \"./Todo.css\"\r\n\r\n\r\nfunction TodoList(props) {\r\n    return (\r\n        <ul className=\"ulTodoListStyle\">\r\n            {props.todos.map((todo, index) => {\r\n                return (\r\n                    <TodoItem\r\n                        todo={todo}\r\n                        key={todo.id}\r\n                        index={index}\r\n                        onChange={props.onToggle}\r\n                    />\r\n                )\r\n            })}\r\n        </ul>\r\n    )\r\n\r\n}\r\n\r\n\r\nTodoList.propTypes = {\r\n    todos: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n    onToggle: PropTypes.func.isRequired\r\n\r\n}\r\n\r\nexport default TodoList","import React, {useState} from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport \"./Todo.css\"\r\n\r\n\r\nfunction AddTodo({onCreate}) {\r\n    const [value, setValue] = useState('')\r\n\r\n    function submitHandler(event) {\r\n        event.preventDefault()\r\n\r\n        if (value.trim()) {\r\n            onCreate('Купить ' + value)\r\n            setValue('')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className=\"formAddStyle\" onSubmit={submitHandler}>\r\n            <input value={value} onChange={event =>\r\n                setValue(event.target.value)}\r\n                   className=\"inputAddStyle\"\r\n            />\r\n            <button type={\"submit\"} className=\"buttonAddStyle\">\r\n                Add item\r\n            </button>\r\n        </form>\r\n    )\r\n\r\n}\r\n\r\nAddTodo.propTypes = {\r\n    onCreate: PropTypes.func.isRequired\r\n\r\n}\r\nexport default AddTodo","import React, {useEffect} from 'react';\r\nimport TodoList from \"./Todo/TodoList\";\r\nimport Context from \"./context\";\r\nimport AddTodo from \"./Todo/AddTodo\";\r\n\r\n\r\nfunction App() {\r\n    const [todos, setTodos] = React.useState(() => {\r\n        const stringTodos = localStorage.getItem('todos');\r\n        const parseTodos = JSON.parse(stringTodos);\r\n        if (Array.isArray(parseTodos)) {\r\n            return parseTodos;\r\n        } else {\r\n            return [];\r\n        }\r\n    });\r\n\r\n    function toggleTodo(id) {\r\n        setTodos(todos.map(todo => {\r\n            if (todo.id === id) {\r\n                todo.completed = !todo.completed\r\n            }\r\n            return todo;\r\n        }));\r\n    }\r\n\r\n    function removeTodo(id) {\r\n        setTodos(todos.filter(todo => todo.id !== id));\r\n    }\r\n\r\n    function addTodo(title) {\r\n        setTodos(todos.concat([\r\n                {\r\n                    title,\r\n                    id: Date.now(),\r\n                    completed: false\r\n                }\r\n            ])\r\n        )\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        localStorage.setItem('todos', JSON.stringify(todos));\r\n    }, [todos]);\r\n\r\n\r\n    return (\r\n        <Context.Provider value={{removeTodo: removeTodo}}>\r\n            <div className='wrapper'>\r\n                <p className=\"titleTextStyle\">Smart Shopping List</p>\r\n                {todos.length ? (\r\n                    <TodoList todos={todos} onToggle={toggleTodo}/>\r\n                ) : (\r\n                    <p>Please add item for your list!</p>\r\n                )}\r\n                <AddTodo onCreate={addTodo}/>\r\n            </div>\r\n\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}